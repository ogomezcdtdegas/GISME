#!/usr/bin/env python
"""
Test para verificar la eliminaci√≥n en cascada de Tecnolog√≠a

Este script prueba que:
1. Al eliminar una Tecnolog√≠a, se eliminen todas sus relaciones
2. Al eliminar una relaci√≥n espec√≠fica, se mantenga la Tecnolog√≠a si tiene otras relaciones
3. Al eliminar la √∫ltima relaci√≥n de una Tecnolog√≠a, se elimine la Tecnolog√≠a completa
4. La eliminaci√≥n en cascada funciona correctamente desde el nivel superior
"""

import os
import sys
import django
from django.test import TestCase, Client
from django.contrib.auth.models import User
import json

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.development')
django.setup()

from _AppComplementos.models import *

def limpiar_datos():
    """Limpia todos los datos para empezar fresh"""
    print("üßπ Limpiando datos existentes...")
    TecnologiaTipoEquipo.objects.all().delete()
    Tecnologia.objects.all().delete()
    TipoEquipoProducto.objects.all().delete()
    TipoEquipo.objects.all().delete()
    ProductoTipoCritCrit.objects.all().delete()
    Producto.objects.all().delete()
    TipoCriticidadCriticidad.objects.all().delete()
    Criticidad.objects.all().delete()
    TipoCriticidad.objects.all().delete()

def crear_datos_prueba():
    """Crea datos de prueba para el test"""
    print("üì¶ Creando datos de prueba...")
    
    # Crear TipoCriticidad
    tipo_crit = TipoCriticidad.objects.create(name="TipoCrit Test")
    
    # Crear Criticidad
    criticidad = Criticidad.objects.create(name="Criticidad Test")
    
    # Crear relaci√≥n TipoCriticidad-Criticidad
    tipo_crit_rel = TipoCriticidadCriticidad.objects.create(
        tipoCriticidad=tipo_crit,
        criticidad=criticidad
    )
    
    # Crear Productos
    producto1 = Producto.objects.create(name="Producto Test 1")
    producto2 = Producto.objects.create(name="Producto Test 2")
    
    # Crear relaciones Producto-TipoCriticidad-Criticidad
    prod_rel1 = ProductoTipoCritCrit.objects.create(
        producto=producto1,
        tipoCriticidadCriticidad=tipo_crit_rel
    )
    prod_rel2 = ProductoTipoCritCrit.objects.create(
        producto=producto2,
        tipoCriticidadCriticidad=tipo_crit_rel
    )
    
    # Crear TipoEquipos
    tipo_equipo1 = TipoEquipo.objects.create(name="TipoEquipo Test 1")
    tipo_equipo2 = TipoEquipo.objects.create(name="TipoEquipo Test 2")
    
    # Crear relaciones TipoEquipo-Producto
    tipo_equipo_rel1 = TipoEquipoProducto.objects.create(
        tipoEquipo=tipo_equipo1,
        productoTipoCritCrit=prod_rel1
    )
    tipo_equipo_rel2 = TipoEquipoProducto.objects.create(
        tipoEquipo=tipo_equipo2,
        productoTipoCritCrit=prod_rel2
    )
    
    # Crear Tecnolog√≠as
    tecnologia1 = Tecnologia.objects.create(name="Tecnolog√≠a Test 1")
    tecnologia2 = Tecnologia.objects.create(name="Tecnolog√≠a Test 2")
    tecnologia3 = Tecnologia.objects.create(name="Tecnolog√≠a Compartida")
    
    # Crear relaciones Tecnolog√≠a-TipoEquipo
    tech_rel1 = TecnologiaTipoEquipo.objects.create(
        tecnologia=tecnologia1,
        tipoEquipoProducto=tipo_equipo_rel1
    )
    tech_rel2 = TecnologiaTipoEquipo.objects.create(
        tecnologia=tecnologia2,
        tipoEquipoProducto=tipo_equipo_rel2
    )
    # Tecnolog√≠a compartida con m√∫ltiples relaciones
    tech_rel3 = TecnologiaTipoEquipo.objects.create(
        tecnologia=tecnologia3,
        tipoEquipoProducto=tipo_equipo_rel1
    )
    tech_rel4 = TecnologiaTipoEquipo.objects.create(
        tecnologia=tecnologia3,
        tipoEquipoProducto=tipo_equipo_rel2
    )
    
    return {
        'tecnologia1': tecnologia1,
        'tecnologia2': tecnologia2,
        'tecnologia_compartida': tecnologia3,
        'tech_rel1': tech_rel1,
        'tech_rel2': tech_rel2,
        'tech_rel3': tech_rel3,
        'tech_rel4': tech_rel4,
        'tipo_equipo1': tipo_equipo1,
        'tipo_equipo2': tipo_equipo2,
    }

def test_eliminacion_tecnologia_completa():
    """Test: Eliminar una Tecnolog√≠a completa"""
    print("\nüß™ Test 1: Eliminaci√≥n completa de Tecnolog√≠a")
    
    datos = crear_datos_prueba()
    
    # Verificar estado inicial
    print(f"   Estado inicial:")
    print(f"   - Tecnolog√≠as: {Tecnologia.objects.count()}")
    print(f"   - Relaciones Tecnolog√≠a-TipoEquipo: {TecnologiaTipoEquipo.objects.count()}")
    
    # Eliminar tecnolog√≠a1 (tiene 1 relaci√≥n)
    tecnologia_id = datos['tecnologia1'].id
    print(f"   Eliminando Tecnolog√≠a '{datos['tecnologia1'].name}' (ID: {tecnologia_id})")
    
    # Simular el comando de eliminaci√≥n
    from _AppComplementos.views.views_Tecnologia.Commands.DeleteTecnologiaCommand.DeleteTecnologiaCommand import DeleteTecnologiaCommand
    
    command = DeleteTecnologiaCommand()
    result = command.execute(tecnologia_id)
    
    print(f"   Resultado: {result}")
    
    # Verificar estado final
    print(f"   Estado final:")
    print(f"   - Tecnolog√≠as: {Tecnologia.objects.count()}")
    print(f"   - Relaciones Tecnolog√≠a-TipoEquipo: {TecnologiaTipoEquipo.objects.count()}")
    
    # Verificar que la tecnolog√≠a fue eliminada
    assert not Tecnologia.objects.filter(id=tecnologia_id).exists(), "La tecnolog√≠a no fue eliminada"
    print("   ‚úÖ Tecnolog√≠a eliminada correctamente")
    
    limpiar_datos()

def test_eliminacion_relacion_tecnologia():
    """Test: Eliminar una relaci√≥n espec√≠fica de Tecnolog√≠a"""
    print("\nüß™ Test 2: Eliminaci√≥n de relaci√≥n espec√≠fica de Tecnolog√≠a")
    
    datos = crear_datos_prueba()
    
    # Verificar estado inicial
    tecnologia_compartida = datos['tecnologia_compartida']
    relaciones_iniciales = TecnologiaTipoEquipo.objects.filter(tecnologia=tecnologia_compartida).count()
    print(f"   Estado inicial:")
    print(f"   - Tecnolog√≠a '{tecnologia_compartida.name}' tiene {relaciones_iniciales} relaciones")
    
    # Eliminar una relaci√≥n espec√≠fica
    relacion_id = datos['tech_rel3'].id
    print(f"   Eliminando relaci√≥n espec√≠fica (ID: {relacion_id})")
    
    # Simular el comando de eliminaci√≥n de relaci√≥n
    from _AppComplementos.views.views_Tecnologia.Commands.DeleteTecnologiaRelacionCommand.DeleteTecnologiaRelacionCommand import DeleteTecnologiaRelacionCommand
    
    command = DeleteTecnologiaRelacionCommand()
    result = command.execute(relacion_id)
    
    print(f"   Resultado: {result}")
    
    # Verificar estado final
    relaciones_finales = TecnologiaTipoEquipo.objects.filter(tecnologia=tecnologia_compartida).count()
    print(f"   Estado final:")
    print(f"   - Tecnolog√≠a '{tecnologia_compartida.name}' tiene {relaciones_finales} relaciones")
    
    # Verificar que la relaci√≥n fue eliminada pero la tecnolog√≠a permanece
    assert not TecnologiaTipoEquipo.objects.filter(id=relacion_id).exists(), "La relaci√≥n no fue eliminada"
    assert Tecnologia.objects.filter(id=tecnologia_compartida.id).exists(), "La tecnolog√≠a fue eliminada incorrectamente"
    assert relaciones_finales == relaciones_iniciales - 1, "El n√∫mero de relaciones no es correcto"
    print("   ‚úÖ Relaci√≥n eliminada correctamente, tecnolog√≠a mantenida")
    
    limpiar_datos()

def test_eliminacion_ultima_relacion():
    """Test: Eliminar la √∫ltima relaci√≥n de una Tecnolog√≠a"""
    print("\nüß™ Test 3: Eliminaci√≥n de √∫ltima relaci√≥n de Tecnolog√≠a")
    
    datos = crear_datos_prueba()
    
    # Usar tecnolog√≠a2 que tiene solo 1 relaci√≥n
    tecnologia = datos['tecnologia2']
    relacion = datos['tech_rel2']
    
    print(f"   Estado inicial:")
    print(f"   - Tecnolog√≠a '{tecnologia.name}' tiene {TecnologiaTipoEquipo.objects.filter(tecnologia=tecnologia).count()} relaci√≥n(es)")
    
    # Eliminar la √∫nica relaci√≥n
    relacion_id = relacion.id
    tecnologia_id = tecnologia.id
    print(f"   Eliminando √∫ltima relaci√≥n (ID: {relacion_id})")
    
    # Simular el comando de eliminaci√≥n de relaci√≥n
    from _AppComplementos.views.views_Tecnologia.Commands.DeleteTecnologiaRelacionCommand.DeleteTecnologiaRelacionCommand import DeleteTecnologiaRelacionCommand
    
    command = DeleteTecnologiaRelacionCommand()
    result = command.execute(relacion_id)
    
    print(f"   Resultado: {result}")
    
    # Verificar estado final
    print(f"   Estado final:")
    print(f"   - Tecnolog√≠as restantes: {Tecnologia.objects.count()}")
    print(f"   - Relaciones restantes: {TecnologiaTipoEquipo.objects.count()}")
    
    # Verificar que tanto la relaci√≥n como la tecnolog√≠a fueron eliminadas
    assert not TecnologiaTipoEquipo.objects.filter(id=relacion_id).exists(), "La relaci√≥n no fue eliminada"
    assert not Tecnologia.objects.filter(id=tecnologia_id).exists(), "La tecnolog√≠a no fue eliminada"
    print("   ‚úÖ √öltima relaci√≥n eliminada y tecnolog√≠a eliminada correctamente")
    
    limpiar_datos()

def test_eliminacion_cascada_desde_tipo_equipo():
    """Test: Eliminaci√≥n en cascada desde TipoEquipo afecta Tecnolog√≠a"""
    print("\nüß™ Test 4: Eliminaci√≥n en cascada desde TipoEquipo")
    
    datos = crear_datos_prueba()
    
    # Verificar estado inicial
    print(f"   Estado inicial:")
    print(f"   - TipoEquipos: {TipoEquipo.objects.count()}")
    print(f"   - Tecnolog√≠as: {Tecnologia.objects.count()}")
    print(f"   - Relaciones Tecnolog√≠a-TipoEquipo: {TecnologiaTipoEquipo.objects.count()}")
    
    # Eliminar tipo_equipo1 (deber√≠a eliminar tecnologia1 y afectar tecnologia_compartida)
    tipo_equipo_id = datos['tipo_equipo1'].id
    print(f"   Eliminando TipoEquipo '{datos['tipo_equipo1'].name}' (ID: {tipo_equipo_id})")
    
    # Simular el comando de eliminaci√≥n de TipoEquipo
    from _AppComplementos.views.views_TipoEquipo.Commands.DeleteTipoEquipoCommand.DeleteTipoEquipoCommand import DeleteTipoEquipoCommand
    
    command = DeleteTipoEquipoCommand()
    result = command.execute(tipo_equipo_id)
    
    print(f"   Resultado: {result}")
    
    # Verificar estado final
    print(f"   Estado final:")
    print(f"   - TipoEquipos: {TipoEquipo.objects.count()}")
    print(f"   - Tecnolog√≠as: {Tecnologia.objects.count()}")
    print(f"   - Relaciones Tecnolog√≠a-TipoEquipo: {TecnologiaTipoEquipo.objects.count()}")
    
    # Verificar que la tecnolog√≠a1 fue eliminada (solo ten√≠a relaci√≥n con tipo_equipo1)
    assert not Tecnologia.objects.filter(id=datos['tecnologia1'].id).exists(), "Tecnolog√≠a1 no fue eliminada"
    # Verificar que la tecnolog√≠a_compartida permanece (tiene relaci√≥n con tipo_equipo2)
    assert Tecnologia.objects.filter(id=datos['tecnologia_compartida'].id).exists(), "Tecnolog√≠a compartida fue eliminada incorrectamente"
    
    print("   ‚úÖ Eliminaci√≥n en cascada desde TipoEquipo funciona correctamente")
    
    limpiar_datos()

def run_all_tests():
    """Ejecuta todos los tests"""
    print("üöÄ Iniciando tests de eliminaci√≥n de Tecnolog√≠a...\n")
    
    try:
        test_eliminacion_tecnologia_completa()
        test_eliminacion_relacion_tecnologia()
        test_eliminacion_ultima_relacion()
        test_eliminacion_cascada_desde_tipo_equipo()
        
        print("\nüéâ ¬°Todos los tests pasaron exitosamente!")
        print("‚úÖ La funcionalidad de eliminaci√≥n en cascada de Tecnolog√≠a funciona correctamente")
        
    except Exception as e:
        print(f"\n‚ùå Error en los tests: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    run_all_tests()
