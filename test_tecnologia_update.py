#!/usr/bin/env python
"""
Test para verificar la l√≥gica de actualizaci√≥n de Tecnolog√≠a

Este script prueba que:
1. Al editar una Tecnolog√≠a y cambiar su nombre a uno que no existe, actualiza el registro existente
2. Al editar una Tecnolog√≠a y cambiar su nombre a uno que ya existe, usa el registro existente
3. Al editar sin cambiar el nombre, mantiene el mismo registro
"""

import os
import sys
import django
from django.test import TestCase, Client
from django.contrib.auth.models import User
import json

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.development')
django.setup()

from _AppComplementos.models import *

def test_tecnologia_update_logic():
    print("üß™ Iniciando test de l√≥gica de actualizaci√≥n de Tecnolog√≠a...\n")
    
    # Limpiar datos existentes para el test
    print("üßπ Limpiando datos existentes...")
    TecnologiaTipoEquipo.objects.all().delete()
    Tecnologia.objects.all().delete()
    TipoCriticidadCriticidad.objects.all().delete()
    Criticidad.objects.all().delete()
    TipoCriticidad.objects.all().delete()
    ProductoTipoCritCrit.objects.all().delete()
    Producto.objects.all().delete()
    TipoEquipoProducto.objects.all().delete()
    TipoEquipo.objects.all().delete()
    
    # Crear datos de prueba
    print("üì¶ Creando datos de prueba...")
    
    # Crear TipoEquipo
    tipo_equipo = TipoEquipo.objects.create(name="Equipo Test")
    
    # Crear Producto
    producto = Producto.objects.create(name="Producto Test")
    
    # Crear TipoCriticidad
    tipo_criticidad = TipoCriticidad.objects.create(name="Tipo Criticidad Test")
    
    # Crear Criticidad
    criticidad = Criticidad.objects.create(name="Criticidad Test")
    
    # Crear relaciones
    relacion_criticidad = TipoCriticidadCriticidad.objects.create(
        tipo_criticidad=tipo_criticidad,
        criticidad=criticidad
    )
    
    relacion_producto = ProductoTipoCritCrit.objects.create(
        producto=producto,
        relacion_tipo_criticidad=relacion_criticidad
    )
    
    relacion_tipo_equipo = TipoEquipoProducto.objects.create(
        tipo_equipo=tipo_equipo,
        relacion_producto=relacion_producto
    )
    
    # Crear Tecnolog√≠a inicial
    tecnologia_inicial = Tecnologia.objects.create(name="Tecnolog√≠a Inicial")
    
    # Crear relaci√≥n TecnologiaTipoEquipo
    relacion_tecnologia = TecnologiaTipoEquipo.objects.create(
        tecnologia=tecnologia_inicial,
        relacion_tipo_equipo=relacion_tipo_equipo
    )
    
    print(f"‚úÖ Datos creados:")
    print(f"   - Tecnolog√≠a inicial: '{tecnologia_inicial.name}' (ID: {tecnologia_inicial.id})")
    print(f"   - Relaci√≥n TecnologiaTipoEquipo: ID {relacion_tecnologia.id}")
    
    # Verificar estado inicial
    tecnologias_antes = Tecnologia.objects.count()
    print(f"   - Total de Tecnolog√≠as antes: {tecnologias_antes}")
    
    # Test 1: Cambiar nombre a uno que no existe (deber√≠a actualizar registro existente)
    print("\nüîÑ Test 1: Cambiar nombre a uno que no existe...")
    
    client = Client()
    update_data = {
        'name': 'Tecnolog√≠a Actualizada',
        'tipo_equipo_id': tipo_equipo.id,
        'producto_id': producto.id,
        'tipo_criticidad_id': tipo_criticidad.id,
        'criticidad_id': criticidad.id
    }
    
    response = client.put(
        f'/complementos/tecnologia/editar/{relacion_tecnologia.id}/',
        data=json.dumps(update_data),
        content_type='application/json'
    )
    
    print(f"   - Respuesta: {response.status_code}")
    
    # Verificar que no se cre√≥ una nueva Tecnolog√≠a
    tecnologias_despues = Tecnologia.objects.count()
    print(f"   - Total de Tecnolog√≠as despu√©s: {tecnologias_despues}")
    
    # Verificar que se actualiz√≥ el nombre
    tecnologia_actualizada = Tecnologia.objects.get(id=tecnologia_inicial.id)
    print(f"   - Nombre actualizado: '{tecnologia_actualizada.name}'")
    
    assert tecnologias_antes == tecnologias_despues, "‚ùå ERROR: Se cre√≥ una nueva Tecnolog√≠a en lugar de actualizar"
    assert tecnologia_actualizada.name == 'Tecnolog√≠a Actualizada', "‚ùå ERROR: No se actualiz√≥ el nombre"
    print("   ‚úÖ Test 1 PAS√ì: Se actualiz√≥ el registro existente")
    
    # Test 2: Crear otra Tecnolog√≠a y luego cambiar a un nombre que ya existe
    print("\nüîÑ Test 2: Cambiar nombre a uno que ya existe...")
    
    # Crear otra Tecnolog√≠a
    otra_tecnologia = Tecnologia.objects.create(name="Otra Tecnolog√≠a")
    otra_relacion = TecnologiaTipoEquipo.objects.create(
        tecnologia=otra_tecnologia,
        relacion_tipo_equipo=relacion_tipo_equipo
    )
    
    tecnologias_antes_test2 = Tecnologia.objects.count()
    print(f"   - Total de Tecnolog√≠as antes: {tecnologias_antes_test2}")
    
    # Intentar cambiar a un nombre que ya existe
    update_data2 = {
        'name': 'Tecnolog√≠a Actualizada',  # Este nombre ya existe
        'tipo_equipo_id': tipo_equipo.id,
        'producto_id': producto.id,
        'tipo_criticidad_id': tipo_criticidad.id,
        'criticidad_id': criticidad.id
    }
    
    response2 = client.put(
        f'/complementos/tecnologia/editar/{otra_relacion.id}/',
        data=json.dumps(update_data2),
        content_type='application/json'
    )
    
    print(f"   - Respuesta: {response2.status_code}")
    
    # Verificar que no se cre√≥ una nueva Tecnolog√≠a
    tecnologias_despues_test2 = Tecnologia.objects.count()
    print(f"   - Total de Tecnolog√≠as despu√©s: {tecnologias_despues_test2}")
    
    # Verificar que la relaci√≥n ahora apunta a la Tecnolog√≠a existente
    otra_relacion.refresh_from_db()
    print(f"   - Tecnolog√≠a de la relaci√≥n: '{otra_relacion.tecnologia.name}' (ID: {otra_relacion.tecnologia.id})")
    
    assert tecnologias_antes_test2 == tecnologias_despues_test2, "‚ùå ERROR: Se cre√≥ una nueva Tecnolog√≠a"
    assert otra_relacion.tecnologia.id == tecnologia_actualizada.id, "‚ùå ERROR: No se us√≥ la Tecnolog√≠a existente"
    print("   ‚úÖ Test 2 PAS√ì: Se us√≥ la Tecnolog√≠a existente")
    
    # Test 3: Cambiar sin modificar el nombre
    print("\nüîÑ Test 3: Actualizar sin cambiar el nombre...")
    
    tecnologias_antes_test3 = Tecnologia.objects.count()
    tecnologia_id_antes = otra_relacion.tecnologia.id
    
    update_data3 = {
        'name': 'Tecnolog√≠a Actualizada',  # Mismo nombre
        'tipo_equipo_id': tipo_equipo.id,
        'producto_id': producto.id,
        'tipo_criticidad_id': tipo_criticidad.id,
        'criticidad_id': criticidad.id
    }
    
    response3 = client.put(
        f'/complementos/tecnologia/editar/{otra_relacion.id}/',
        data=json.dumps(update_data3),
        content_type='application/json'
    )
    
    tecnologias_despues_test3 = Tecnologia.objects.count()
    otra_relacion.refresh_from_db()
    
    assert tecnologias_antes_test3 == tecnologias_despues_test3, "‚ùå ERROR: Se modific√≥ el n√∫mero de Tecnolog√≠as"
    assert otra_relacion.tecnologia.id == tecnologia_id_antes, "‚ùå ERROR: Se cambi√≥ la Tecnolog√≠a"
    print("   ‚úÖ Test 3 PAS√ì: Se mantuvo la misma Tecnolog√≠a")
    
    print("\nüéâ ¬°Todos los tests pasaron! La l√≥gica de actualizaci√≥n funciona correctamente.")
    
    # Limpiar datos de prueba
    print("\nüßπ Limpiando datos de prueba...")
    TecnologiaTipoEquipo.objects.all().delete()
    Tecnologia.objects.all().delete()
    TipoCriticidadCriticidad.objects.all().delete()
    Criticidad.objects.all().delete()
    TipoCriticidad.objects.all().delete()
    ProductoTipoCritCrit.objects.all().delete()
    Producto.objects.all().delete()
    TipoEquipoProducto.objects.all().delete()
    TipoEquipo.objects.all().delete()
    
    print("‚úÖ Test completado exitosamente!")

if __name__ == "__main__":
    test_tecnologia_update_logic()
