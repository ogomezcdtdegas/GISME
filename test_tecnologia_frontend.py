# -*- coding: utf-8 -*-
#!/usr/bin/env python3

"""
TEST FRONTEND TECNOLOGIA - Validacion completa del comportamiento frontend
========================================================================

Este script valida el comportamiento completo del frontend para Tecnologia:
1. Agrupacion visual con badges correctos
2. Alternancia de colores entre grupos
3. Funcionalidad de eliminacion con alertas apropiadas
4. Comportamiento de cascada y limpieza de huerfanos
5. Actualizacion correcta de la tabla tras eliminaciones
"""

import os
import sys
import django
from django.conf import settings

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from _AppComplementos.models import *
from django.db import transaction
import json

class TecnologiaFrontendTest:
    def __init__(self):
        self.test_data = []
        
    def setup_test_data(self):
        """Crear datos de prueba para validaci√≥n frontend"""
        print("üîß Configurando datos de prueba...")
        
        with transaction.atomic():
            # Limpiar datos existentes
            TecnologiaRelacion.objects.all().delete()
            Tecnologia.objects.all().delete()
            
            # Crear tecnolog√≠as con diferentes n√∫meros de relaciones
            self.test_data = []
            
            # Tecnolog√≠a 1: Con m√∫ltiples relaciones (3 relaciones)
            tech1 = Tecnologia.objects.create(name="Frontend React")
            
            # Tecnolog√≠a 2: Con una sola relaci√≥n
            tech2 = Tecnologia.objects.create(name="Backend Python")
            
            # Tecnolog√≠a 3: Con m√∫ltiples relaciones (2 relaciones)
            tech3 = Tecnologia.objects.create(name="Base de Datos MySQL")
            
            # Obtener datos necesarios para las relaciones
            criticidades = list(Criticidad.objects.all()[:3])
            tipo_criticidades = list(TipoCriticidad.objects.all()[:3])
            productos = list(Producto.objects.all()[:3])
            tipos_equipo = list(TipoEquipo.objects.all()[:3])
            
            if not all([criticidades, tipo_criticidades, productos, tipos_equipo]):
                print("‚ùå Error: No hay datos suficientes en los niveles superiores")
                return False
            
            # Crear relaciones para Frontend React (3 relaciones)
            TecnologiaRelacion.objects.create(
                tecnologia=tech1,
                tipo_equipo=tipos_equipo[0],
                producto=productos[0],
                tipo_criticidad=tipo_criticidades[0],
                criticidad=criticidades[0]
            )
            TecnologiaRelacion.objects.create(
                tecnologia=tech1,
                tipo_equipo=tipos_equipo[0],
                producto=productos[1],
                tipo_criticidad=tipo_criticidades[0],
                criticidad=criticidades[0]
            )
            TecnologiaRelacion.objects.create(
                tecnologia=tech1,
                tipo_equipo=tipos_equipo[1],
                producto=productos[0],
                tipo_criticidad=tipo_criticidades[1],
                criticidad=criticidades[1]
            )
            
            # Crear relaci√≥n para Backend Python (1 relaci√≥n)
            TecnologiaRelacion.objects.create(
                tecnologia=tech2,
                tipo_equipo=tipos_equipo[0],
                producto=productos[2],
                tipo_criticidad=tipo_criticidades[2],
                criticidad=criticidades[2]
            )
            
            # Crear relaciones para Base de Datos MySQL (2 relaciones)
            TecnologiaRelacion.objects.create(
                tecnologia=tech3,
                tipo_equipo=tipos_equipo[1],
                producto=productos[1],
                tipo_criticidad=tipo_criticidades[1],
                criticidad=criticidades[1]
            )
            TecnologiaRelacion.objects.create(
                tecnologia=tech3,
                tipo_equipo=tipos_equipo[2],
                producto=productos[2],
                tipo_criticidad=tipo_criticidades[2],
                criticidad=criticidades[2]
            )
            
            self.test_data = [
                {
                    'tecnologia': tech1,
                    'name': 'Frontend React',
                    'relaciones': 3,
                    'tipo': 'm√∫ltiples relaciones'
                },
                {
                    'tecnologia': tech2,
                    'name': 'Backend Python',
                    'relaciones': 1,
                    'tipo': '√∫nica relaci√≥n'
                },
                {
                    'tecnologia': tech3,
                    'name': 'Base de Datos MySQL',
                    'relaciones': 2,
                    'tipo': 'm√∫ltiples relaciones'
                }
            ]
            
            print("‚úÖ Datos de prueba configurados correctamente")
            return True
    
    def validate_data_structure(self):
        """Validar la estructura de datos para el frontend"""
        print("\nüìä Validando estructura de datos...")
        
        # Obtener todas las relaciones agrupadas
        relaciones = TecnologiaRelacion.objects.select_related(
            'tecnologia', 'tipo_equipo', 'producto', 'tipo_criticidad', 'criticidad'
        ).all()
        
        # Agrupar por tecnolog√≠a
        grupos = {}
        for relacion in relaciones:
            tech_id = relacion.tecnologia.id
            if tech_id not in grupos:
                grupos[tech_id] = {
                    'tecnologia': relacion.tecnologia,
                    'relaciones': []
                }
            grupos[tech_id]['relaciones'].append(relacion)
        
        print(f"üìà Datos agrupados encontrados: {len(grupos)} grupos")
        
        for tech_id, grupo in grupos.items():
            tech = grupo['tecnologia']
            count = len(grupo['relaciones'])
            badge_text = f"{count} combinaci√≥n" if count == 1 else f"{count} combinaciones"
            
            print(f"  üîπ {tech.name}: {count} relaciones ‚Üí Badge: '{badge_text}'")
            
            # Mostrar detalles de las relaciones
            for i, rel in enumerate(grupo['relaciones'], 1):
                print(f"    {i}. {rel.tipo_equipo.name} ‚Üí {rel.producto.name} ‚Üí {rel.tipo_criticidad.name} ‚Üí {rel.criticidad.name}")
        
        return True
    
    def test_deletion_scenarios(self):
        """Probar diferentes escenarios de eliminaci√≥n"""
        print("\nüóëÔ∏è Probando escenarios de eliminaci√≥n...")
        
        # Scenario 1: Eliminar una relaci√≥n de tecnolog√≠a con m√∫ltiples relaciones
        print("\nüìã Escenario 1: Eliminar relaci√≥n de tecnolog√≠a con m√∫ltiples relaciones")
        tech1 = Tecnologia.objects.get(name="Frontend React")
        relaciones_tech1 = TecnologiaRelacion.objects.filter(tecnologia=tech1)
        print(f"  üîπ {tech1.name} tiene {relaciones_tech1.count()} relaciones")
        
        if relaciones_tech1.count() > 1:
            print("  ‚ö†Ô∏è  Esperado: Modal con opciones de eliminaci√≥n")
            print("  üìù Opciones disponibles:")
            print("     ‚Ä¢ Solo eliminar esta relaci√≥n")
            print("     ‚Ä¢ Eliminar la tecnolog√≠a y todas sus relaciones")
            print("  ‚ÑπÔ∏è  Nota: La tecnolog√≠a es el √∫ltimo nivel, no hay cascada")
        
        # Scenario 2: Eliminar √∫ltima relaci√≥n de tecnolog√≠a
        print("\nüìã Escenario 2: Eliminar √∫ltima relaci√≥n de tecnolog√≠a")
        tech2 = Tecnologia.objects.get(name="Backend Python")
        relaciones_tech2 = TecnologiaRelacion.objects.filter(tecnologia=tech2)
        print(f"  üîπ {tech2.name} tiene {relaciones_tech2.count()} relaciones")
        
        if relaciones_tech2.count() == 1:
            print("  ‚ö†Ô∏è  Esperado: Modal de confirmaci√≥n simple")
            print("  üìù Comportamiento:")
            print("     ‚Ä¢ Advertencia: 'Esta es la √∫ltima relaci√≥n'")
            print("     ‚Ä¢ 'La tecnolog√≠a ser√° eliminada completamente'")
            print("     ‚Ä¢ Usar DeleteTecnologiaRelacionCommand (backend maneja limpieza)")
        
        return True
    
    def validate_frontend_features(self):
        """Validar caracter√≠sticas esperadas del frontend"""
        print("\nüé® Validando caracter√≠sticas del frontend...")
        
        expected_features = [
            {
                'feature': 'Agrupaci√≥n Visual',
                'description': 'Rowspan para nombre de tecnolog√≠a, badges con contador',
                'validation': 'Verificar que tecnolog√≠as se muestren agrupadas con badges correctos'
            },
            {
                'feature': 'Alternancia de Colores',
                'description': 'Grupos alternos con colores diferentes',
                'validation': 'Verificar clases group-odd y group-even aplicadas correctamente'
            },
            {
                'feature': 'Hover Effect',
                'description': 'Efecto hover para grupo completo',
                'validation': 'Verificar que hover resalta todo el grupo'
            },
            {
                'feature': 'Botones de Eliminaci√≥n',
                'description': 'Bot√≥n de eliminar para cada relaci√≥n',
                'validation': 'Verificar que cada fila tenga bot√≥n de eliminar'
            },
            {
                'feature': 'Modales de Confirmaci√≥n',
                'description': 'Diferentes modales seg√∫n n√∫mero de relaciones',
                'validation': 'Verificar que aparezcan modales apropiados'
            },
            {
                'feature': 'Mensajes de Advertencia',
                'description': 'Informaci√≥n clara sobre las acciones',
                'validation': 'Verificar que mensajes sean claros y precisos'
            }
        ]
        
        for feature in expected_features:
            print(f"  ‚úÖ {feature['feature']}")
            print(f"     üìù {feature['description']}")
            print(f"     üîç {feature['validation']}")
        
        return True
    
    def generate_test_report(self):
        """Generar reporte de prueba"""
        print("\nüìã REPORTE DE PRUEBA FRONTEND - TECNOLOG√çA")
        print("=" * 60)
        
        # Resumen de datos
        total_tecnologias = Tecnologia.objects.count()
        total_relaciones = TecnologiaRelacion.objects.count()
        
        print(f"üìä Datos de prueba:")
        print(f"  ‚Ä¢ Total tecnolog√≠as: {total_tecnologias}")
        print(f"  ‚Ä¢ Total relaciones: {total_relaciones}")
        
        # Detalle por tecnolog√≠a
        print(f"\nüîç Detalle por tecnolog√≠a:")
        for data in self.test_data:
            tech = data['tecnologia']
            relaciones_count = TecnologiaRelacion.objects.filter(tecnologia=tech).count()
            badge = f"{relaciones_count} combinaci√≥n" if relaciones_count == 1 else f"{relaciones_count} combinaciones"
            
            print(f"  üîπ {data['name']}: {relaciones_count} relaciones ‚Üí Badge: '{badge}'")
            print(f"     Tipo: {data['tipo']}")
            print(f"     Esperado: {'Modal con opciones' if relaciones_count > 1 else 'Modal de confirmaci√≥n simple'}")
        
        # Instrucciones para validaci√≥n manual
        print(f"\nüìù INSTRUCCIONES PARA VALIDACI√ìN MANUAL:")
        print("=" * 50)
        print("1. Abrir http://127.0.0.1:8000/complementos/tecnologias/")
        print("2. Verificar agrupaci√≥n visual con badges correctos")
        print("3. Verificar alternancia de colores entre grupos")
        print("4. Probar hover effect en grupos completos")
        print("5. Probar eliminaci√≥n en tecnolog√≠a con m√∫ltiples relaciones:")
        print("   - Debe aparecer modal con opciones")
        print("   - Probar 'Solo eliminar esta relaci√≥n'")
        print("   - Probar 'Eliminar la tecnolog√≠a y todas sus relaciones'")
        print("6. Probar eliminaci√≥n en tecnolog√≠a con √∫nica relaci√≥n:")
        print("   - Debe aparecer modal de confirmaci√≥n simple")
        print("   - Debe advertir que es la √∫ltima relaci√≥n")
        print("7. Verificar que la tabla se actualice correctamente tras eliminaciones")
        print("8. Verificar que los mensajes sean claros y precisos")
        
        # Casos de prueba espec√≠ficos
        print(f"\nüß™ CASOS DE PRUEBA ESPEC√çFICOS:")
        print("=" * 40)
        print("CASO 1: Eliminar relaci√≥n de 'Frontend React' (3 relaciones)")
        print("  - Esperado: Modal con opciones")
        print("  - Seleccionar 'Solo eliminar esta relaci√≥n'")
        print("  - Verificar que queden 2 relaciones")
        print("  - Verificar que badge se actualice a '2 combinaciones'")
        
        print("\nCASO 2: Eliminar relaci√≥n de 'Backend Python' (1 relaci√≥n)")
        print("  - Esperado: Modal de confirmaci√≥n simple")
        print("  - Debe advertir que es la √∫ltima relaci√≥n")
        print("  - Confirmar eliminaci√≥n")
        print("  - Verificar que la tecnolog√≠a desaparezca completamente")
        
        print("\nCASO 3: Eliminar tecnolog√≠a completa 'Base de Datos MySQL'")
        print("  - Esperado: Modal con opciones")
        print("  - Seleccionar 'Eliminar la tecnolog√≠a y todas sus relaciones'")
        print("  - Verificar que todas las relaciones desaparezcan")
        print("  - Verificar que la tecnolog√≠a desaparezca completamente")
        
        return True
    
    def run_all_tests(self):
        """Ejecutar todas las pruebas"""
        print("üöÄ INICIANDO PRUEBAS FRONTEND - TECNOLOG√çA")
        print("=" * 60)
        
        try:
            # Configurar datos de prueba
            if not self.setup_test_data():
                return False
            
            # Validar estructura de datos
            if not self.validate_data_structure():
                return False
            
            # Probar escenarios de eliminaci√≥n
            if not self.test_deletion_scenarios():
                return False
            
            # Validar caracter√≠sticas del frontend
            if not self.validate_frontend_features():
                return False
            
            # Generar reporte
            if not self.generate_test_report():
                return False
            
            print("\n‚úÖ TODAS LAS PRUEBAS COMPLETADAS EXITOSAMENTE")
            print("üåê Servidor corriendo en: http://127.0.0.1:8000/complementos/tecnologias/")
            print("üìã Proceder con validaci√≥n manual seg√∫n las instrucciones anteriores")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error durante las pruebas: {str(e)}")
            return False

if __name__ == "__main__":
    test = TecnologiaFrontendTest()
    success = test.run_all_tests()
    
    if success:
        print("\nüéØ PRUEBAS FRONTEND COMPLETADAS")
        print("Ahora puedes validar manualmente en el navegador")
    else:
        print("\n‚ùå PRUEBAS FALLIDAS")
        sys.exit(1)
