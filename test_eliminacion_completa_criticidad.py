#!/usr/bin/env python3
"""
Script para probar la eliminaci√≥n completa de criticidad con toda la cadena de dependencias.
"""

import os
import sys
import django

# Configurar Django
sys.path.append('d:/EQ-456/Escritorio/GISME')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.development')
django.setup()

from _AppComplementos.models import (
    Criticidad, TipoCriticidad, Producto, TipoCriticidadCriticidad,
    ProductoTipoCritCrit, TipoEquipo, TipoEquipoProducto, 
    Tecnologia, TecnologiaTipoEquipo
)
from django.db import transaction

def crear_datos_prueba():
    """Crear datos de prueba para la eliminaci√≥n completa."""
    print("üîÑ Creando datos de prueba para eliminaci√≥n completa...")
    
    with transaction.atomic():
        # 1. Crear criticidad de prueba
        criticidad_test = Criticidad.objects.create(name="Criticidad Test Eliminaci√≥n")
        print(f"‚úÖ Criticidad creada: {criticidad_test.name}")
        
        # 2. Crear tipo de criticidad
        tipo_criticidad_test = TipoCriticidad.objects.create(name="Tipo Test Eliminaci√≥n")
        print(f"‚úÖ Tipo de criticidad creado: {tipo_criticidad_test.name}")
        
        # 3. Crear relaci√≥n tipo-criticidad
        relacion_tipo_crit = TipoCriticidadCriticidad.objects.create(
            tipo_criticidad=tipo_criticidad_test,
            criticidad=criticidad_test
        )
        print(f"‚úÖ Relaci√≥n tipo-criticidad creada: {relacion_tipo_crit}")
        
        # 4. Crear producto
        producto_test = Producto.objects.create(name="Producto Test Eliminaci√≥n")
        print(f"‚úÖ Producto creado: {producto_test.name}")
        
        # 5. Crear relaci√≥n producto-tipo-criticidad
        relacion_producto = ProductoTipoCritCrit.objects.create(
            producto=producto_test,
            relacion_tipo_criticidad=relacion_tipo_crit
        )
        print(f"‚úÖ Relaci√≥n producto-tipo-criticidad creada: {relacion_producto}")
        
        # 6. Crear tipo de equipo
        tipo_equipo_test = TipoEquipo.objects.create(name="Tipo Equipo Test Eliminaci√≥n")
        print(f"‚úÖ Tipo de equipo creado: {tipo_equipo_test.name}")
        
        # 7. Crear relaci√≥n tipo equipo-producto
        relacion_tipo_equipo = TipoEquipoProducto.objects.create(
            tipo_equipo=tipo_equipo_test,
            relacion_producto=relacion_producto
        )
        print(f"‚úÖ Relaci√≥n tipo equipo-producto creada: {relacion_tipo_equipo}")
        
        # 8. Crear tecnolog√≠a
        tecnologia_test = Tecnologia.objects.create(name="Tecnolog√≠a Test Eliminaci√≥n")
        print(f"‚úÖ Tecnolog√≠a creada: {tecnologia_test.name}")
        
        # 9. Crear relaci√≥n tecnolog√≠a-tipo equipo
        relacion_tecnologia = TecnologiaTipoEquipo.objects.create(
            tecnologia=tecnologia_test,
            relacion_tipo_equipo=relacion_tipo_equipo
        )
        print(f"‚úÖ Relaci√≥n tecnolog√≠a-tipo equipo creada: {relacion_tecnologia}")
        
        print(f"\nüéØ Cadena completa creada:")
        print(f"   Criticidad: {criticidad_test.name}")
        print(f"   ‚Üí Tipo: {tipo_criticidad_test.name}")
        print(f"   ‚Üí Producto: {producto_test.name}")
        print(f"   ‚Üí Tipo Equipo: {tipo_equipo_test.name}")
        print(f"   ‚Üí Tecnolog√≠a: {tecnologia_test.name}")
        
        return criticidad_test.id

def verificar_datos_antes():
    """Verificar que existen los datos antes de la eliminaci√≥n."""
    print("\nüìä Verificando datos antes de la eliminaci√≥n:")
    
    criticidades = Criticidad.objects.filter(name__contains="Test Eliminaci√≥n")
    tipos = TipoCriticidad.objects.filter(name__contains="Test Eliminaci√≥n")
    productos = Producto.objects.filter(name__contains="Test Eliminaci√≥n")
    tipos_equipo = TipoEquipo.objects.filter(name__contains="Test Eliminaci√≥n")
    tecnologias = Tecnologia.objects.filter(name__contains="Test Eliminaci√≥n")
    
    print(f"   Criticidades: {criticidades.count()}")
    print(f"   Tipos de criticidad: {tipos.count()}")
    print(f"   Productos: {productos.count()}")
    print(f"   Tipos de equipo: {tipos_equipo.count()}")
    print(f"   Tecnolog√≠as: {tecnologias.count()}")
    
    # Verificar relaciones
    relaciones_tipo_crit = TipoCriticidadCriticidad.objects.filter(
        criticidad__name__contains="Test Eliminaci√≥n"
    )
    relaciones_producto = ProductoTipoCritCrit.objects.filter(
        producto__name__contains="Test Eliminaci√≥n"
    )
    relaciones_tipo_equipo = TipoEquipoProducto.objects.filter(
        tipo_equipo__name__contains="Test Eliminaci√≥n"
    )
    relaciones_tecnologia = TecnologiaTipoEquipo.objects.filter(
        tecnologia__name__contains="Test Eliminaci√≥n"
    )
    
    print(f"\n   Relaciones tipo-criticidad: {relaciones_tipo_crit.count()}")
    print(f"   Relaciones producto-tipo-criticidad: {relaciones_producto.count()}")
    print(f"   Relaciones tipo equipo-producto: {relaciones_tipo_equipo.count()}")
    print(f"   Relaciones tecnolog√≠a-tipo equipo: {relaciones_tecnologia.count()}")

def verificar_datos_despues():
    """Verificar que se eliminaron todos los datos despu√©s de la eliminaci√≥n."""
    print("\nüìä Verificando datos despu√©s de la eliminaci√≥n:")
    
    criticidades = Criticidad.objects.filter(name__contains="Test Eliminaci√≥n")
    tipos = TipoCriticidad.objects.filter(name__contains="Test Eliminaci√≥n")
    productos = Producto.objects.filter(name__contains="Test Eliminaci√≥n")
    tipos_equipo = TipoEquipo.objects.filter(name__contains="Test Eliminaci√≥n")
    tecnologias = Tecnologia.objects.filter(name__contains="Test Eliminaci√≥n")
    
    print(f"   Criticidades: {criticidades.count()}")
    print(f"   Tipos de criticidad: {tipos.count()}")
    print(f"   Productos: {productos.count()}")
    print(f"   Tipos de equipo: {tipos_equipo.count()}")
    print(f"   Tecnolog√≠as: {tecnologias.count()}")
    
    # Verificar relaciones
    relaciones_tipo_crit = TipoCriticidadCriticidad.objects.filter(
        criticidad__name__contains="Test Eliminaci√≥n"
    )
    relaciones_producto = ProductoTipoCritCrit.objects.filter(
        producto__name__contains="Test Eliminaci√≥n"
    )
    relaciones_tipo_equipo = TipoEquipoProducto.objects.filter(
        tipo_equipo__name__contains="Test Eliminaci√≥n"
    )
    relaciones_tecnologia = TecnologiaTipoEquipo.objects.filter(
        tecnologia__name__contains="Test Eliminaci√≥n"
    )
    
    print(f"\n   Relaciones tipo-criticidad: {relaciones_tipo_crit.count()}")
    print(f"   Relaciones producto-tipo-criticidad: {relaciones_producto.count()}")
    print(f"   Relaciones tipo equipo-producto: {relaciones_tipo_equipo.count()}")
    print(f"   Relaciones tecnolog√≠a-tipo equipo: {relaciones_tecnologia.count()}")
    
    # Verificar que todo est√° en 0
    total_elementos = (
        criticidades.count() + tipos.count() + productos.count() + 
        tipos_equipo.count() + tecnologias.count()
    )
    total_relaciones = (
        relaciones_tipo_crit.count() + relaciones_producto.count() + 
        relaciones_tipo_equipo.count() + relaciones_tecnologia.count()
    )
    
    if total_elementos == 0 and total_relaciones == 0:
        print("\n‚úÖ √âXITO: Todos los elementos y relaciones fueron eliminados correctamente")
    else:
        print(f"\n‚ùå ERROR: A√∫n quedan {total_elementos} elementos y {total_relaciones} relaciones")

def main():
    print("üöÄ Iniciando prueba de eliminaci√≥n completa de criticidad")
    
    try:
        # 1. Crear datos de prueba
        criticidad_id = crear_datos_prueba()
        
        # 2. Verificar datos antes
        verificar_datos_antes()
        
        # 3. Simular la eliminaci√≥n usando el comando
        print(f"\nüóëÔ∏è  Eliminando criticidad con ID: {criticidad_id}")
        
        # Importar y ejecutar el comando
        from _AppComplementos.views.views_Criticidad.Commands.DeleteCriticidadCommand.DeleteCriticidadCommand import DeleteCriticidadCommand
        from django.http import HttpRequest
        
        # Simular request
        request = HttpRequest()
        request.method = 'DELETE'
        
        # Ejecutar el comando
        command = DeleteCriticidadCommand()
        response = command.delete(request, criticidad_id)
        
        print(f"‚úÖ Comando ejecutado. Status: {response.status_code}")
        print(f"üìÑ Respuesta: {response.data}")
        
        # 4. Verificar datos despu√©s
        verificar_datos_despues()
        
    except Exception as e:
        print(f"‚ùå Error durante la prueba: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
